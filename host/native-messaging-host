#!/usr/bin/env python2
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A simple native messaging host. Shows a Tkinter dialog with incoming messages
# that also allows to send message back to the webapp.

import struct
import sys
import threading
import Queue
import time
import json
import os

try:
    import Tkinter
    import tkMessageBox
except ImportError:
    Tkinter = None

# On Windows, the default I/O mode is O_TEXT. Set this to O_BINARY
# to avoid unwanted modifications of the input/output streams.
if sys.platform == "win32":
    import msvcrt
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)


# Helper function that sends a message to the webapp.
def send_message(message):
    # Write message size.
    sys.stdout.write(struct.pack('I', len(message)))
    # Write the message itself.
    sys.stdout.write(message)
    sys.stdout.flush()


# Thread that reads messages from the webapp.
def read_thread_func(queue):
    message_number = 0
    while 1:
        # Read the message length (first 4 bytes).
        text_length_bytes = sys.stdin.read(4)

        if len(text_length_bytes) == 0:
            if queue:
                queue.put(None)
            sys.exit(0)

        # Unpack message length as 4 byte integer.
        text_length = struct.unpack('i', text_length_bytes)[0]

        # Read the text (JSON object) of the message.
        text = sys.stdin.read(text_length).decode('utf-8')

        if queue:
            queue.put(text)
        else:
            # In headless mode just send an echo message back.
            send_message('{"echo": %s}' % text)


class MsgBackend(object):
    def __init__(self, queue):
        self.queue = queue
        self.cache = ''

    def _messageNoneHandler(self):
        sys.exit()

    def _sendErrorHandler(self):
        pass

    def processMessages(self):
        while not self.queue.empty():
            message = self.queue.get_nowait()
            if message is None:
                self._messageNoneHandler()
                return
            self.log("Received", message)

    def sendMsg(self, text):
        try:
            send_message(text)
        except IOError:
            self._sendErrorHandler()
            sys.exit(1)

    def log(self, comment, message):
        if comment == 'Received':
            self.cache = message


if Tkinter:
    class NativeMessagingWindow(Tkinter.Frame, MsgBackend):
        def __init__(self, queue):
            MsgBackend.__init__(self, queue)
            Tkinter.Frame.__init__(self)
            self.pack()

            self.text = Tkinter.Text(self)
            self.text.grid(row=0, column=0, padx=10, pady=10, columnspan=2)
            self.text.config(state=Tkinter.DISABLED, height=10, width=40)

            self.messageContent = Tkinter.StringVar()
            self.sendEntry = Tkinter.Entry(
                self, textvariable=self.messageContent)
            self.sendEntry.grid(row=1, column=0, padx=10, pady=10)

            self.sendButton = Tkinter.Button(
                self, text="Send", command=self.onSend)
            self.sendButton.grid(row=1, column=1, padx=10, pady=10)

            self.after(100, self.processMessages)

        def _messageNoneHandler(self):
            self.quit()

        def _sendErrorHandler(self):
            tkMessageBox.showinfo('Native Messaging',
                                  'Failed to send message.')

        def processMessages(self):
            MsgBackend.processMessages(self)

            self.after(100, self.processMessages)

        def onSend(self):
            text = '{"text": "' + self.messageContent.get() + '"}'
            self.log('Sending', text)
            self.sendMsg(text)

        def log(self, comment, message):
            message = comment + ' ' + message
            self.text.config(state=Tkinter.NORMAL)
            self.text.insert(Tkinter.END, message + "\n")
            self.text.config(state=Tkinter.DISABLED)


def thread_queue():
    queue = Queue.Queue()

    thread = threading.Thread(target=read_thread_func, args=(queue,))
    thread.daemon = True
    thread.start()

    return queue


def msgGUI(queue):
    if not Tkinter:
        send_message('"Tkinter python module wasn\'t found.'
                     ' Running in headless mode.'
                     ' Please consider installing Tkinter."')
        read_thread_func(None)
        sys.exit(0)

    main_window = NativeMessagingWindow(queue)
    main_window.master.title('Native Messaging')
    main_window.mainloop()


def singleTrigger(queue):
    host = MsgBackend(queue)
    time.sleep(.05)
    host.processMessages()

    return host.cache


if __name__ == '__main__':

    queue = thread_queue()
    handshake = singleTrigger(queue)
    try:
        init = json.loads(handshake)['init']
    except KeyError:
        init = 'daemon'

    if init == 'daemon':
        msgGUI(queue)
    elif init == 'trigger':
        os.system('./custom-event-handler \'%s\'' % handshake)
    else:
        os.system('notify-send "Unknown Chrome Event %(init)s"'
                  ' "Full Message: %(msg)s"'
                  ' --hint=int:transient:1' % {
                      "init": init,
                      "msg": handshake
                  })
